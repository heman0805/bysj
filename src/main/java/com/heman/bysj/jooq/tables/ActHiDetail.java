/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables;


import com.heman.bysj.jooq.Bysj;
import com.heman.bysj.jooq.Indexes;
import com.heman.bysj.jooq.Keys;
import com.heman.bysj.jooq.tables.records.ActHiDetailRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActHiDetail extends TableImpl<ActHiDetailRecord> {

    private static final long serialVersionUID = 1070427116;

    /**
     * The reference instance of <code>bysj.act_hi_detail</code>
     */
    public static final ActHiDetail ACT_HI_DETAIL = new ActHiDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActHiDetailRecord> getRecordType() {
        return ActHiDetailRecord.class;
    }

    /**
     * The column <code>bysj.act_hi_detail.ID_</code>.
     */
    public final TableField<ActHiDetailRecord, String> ID_ = createField(DSL.name("ID_"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>bysj.act_hi_detail.TYPE_</code>.
     */
    public final TableField<ActHiDetailRecord, String> TYPE_ = createField(DSL.name("TYPE_"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>bysj.act_hi_detail.PROC_INST_ID_</code>.
     */
    public final TableField<ActHiDetailRecord, String> PROC_INST_ID_ = createField(DSL.name("PROC_INST_ID_"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bysj.act_hi_detail.EXECUTION_ID_</code>.
     */
    public final TableField<ActHiDetailRecord, String> EXECUTION_ID_ = createField(DSL.name("EXECUTION_ID_"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bysj.act_hi_detail.TASK_ID_</code>.
     */
    public final TableField<ActHiDetailRecord, String> TASK_ID_ = createField(DSL.name("TASK_ID_"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bysj.act_hi_detail.ACT_INST_ID_</code>.
     */
    public final TableField<ActHiDetailRecord, String> ACT_INST_ID_ = createField(DSL.name("ACT_INST_ID_"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bysj.act_hi_detail.NAME_</code>.
     */
    public final TableField<ActHiDetailRecord, String> NAME_ = createField(DSL.name("NAME_"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>bysj.act_hi_detail.VAR_TYPE_</code>.
     */
    public final TableField<ActHiDetailRecord, String> VAR_TYPE_ = createField(DSL.name("VAR_TYPE_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bysj.act_hi_detail.REV_</code>.
     */
    public final TableField<ActHiDetailRecord, Integer> REV_ = createField(DSL.name("REV_"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bysj.act_hi_detail.TIME_</code>.
     */
    public final TableField<ActHiDetailRecord, Timestamp> TIME_ = createField(DSL.name("TIME_"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>bysj.act_hi_detail.BYTEARRAY_ID_</code>.
     */
    public final TableField<ActHiDetailRecord, String> BYTEARRAY_ID_ = createField(DSL.name("BYTEARRAY_ID_"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bysj.act_hi_detail.DOUBLE_</code>.
     */
    public final TableField<ActHiDetailRecord, Double> DOUBLE_ = createField(DSL.name("DOUBLE_"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>bysj.act_hi_detail.LONG_</code>.
     */
    public final TableField<ActHiDetailRecord, Long> LONG_ = createField(DSL.name("LONG_"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>bysj.act_hi_detail.TEXT_</code>.
     */
    public final TableField<ActHiDetailRecord, String> TEXT_ = createField(DSL.name("TEXT_"), org.jooq.impl.SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>bysj.act_hi_detail.TEXT2_</code>.
     */
    public final TableField<ActHiDetailRecord, String> TEXT2_ = createField(DSL.name("TEXT2_"), org.jooq.impl.SQLDataType.VARCHAR(4000), this, "");

    /**
     * Create a <code>bysj.act_hi_detail</code> table reference
     */
    public ActHiDetail() {
        this(DSL.name("act_hi_detail"), null);
    }

    /**
     * Create an aliased <code>bysj.act_hi_detail</code> table reference
     */
    public ActHiDetail(String alias) {
        this(DSL.name(alias), ACT_HI_DETAIL);
    }

    /**
     * Create an aliased <code>bysj.act_hi_detail</code> table reference
     */
    public ActHiDetail(Name alias) {
        this(alias, ACT_HI_DETAIL);
    }

    private ActHiDetail(Name alias, Table<ActHiDetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActHiDetail(Name alias, Table<ActHiDetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ActHiDetail(Table<O> child, ForeignKey<O, ActHiDetailRecord> key) {
        super(child, key, ACT_HI_DETAIL);
    }

    @Override
    public Schema getSchema() {
        return Bysj.BYSJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACT_HI_DETAIL_ACT_IDX_HI_DETAIL_ACT_INST, Indexes.ACT_HI_DETAIL_ACT_IDX_HI_DETAIL_NAME, Indexes.ACT_HI_DETAIL_ACT_IDX_HI_DETAIL_PROC_INST, Indexes.ACT_HI_DETAIL_ACT_IDX_HI_DETAIL_TASK_ID, Indexes.ACT_HI_DETAIL_ACT_IDX_HI_DETAIL_TIME, Indexes.ACT_HI_DETAIL_PRIMARY);
    }

    @Override
    public UniqueKey<ActHiDetailRecord> getPrimaryKey() {
        return Keys.KEY_ACT_HI_DETAIL_PRIMARY;
    }

    @Override
    public List<UniqueKey<ActHiDetailRecord>> getKeys() {
        return Arrays.<UniqueKey<ActHiDetailRecord>>asList(Keys.KEY_ACT_HI_DETAIL_PRIMARY);
    }

    @Override
    public ActHiDetail as(String alias) {
        return new ActHiDetail(DSL.name(alias), this);
    }

    @Override
    public ActHiDetail as(Name alias) {
        return new ActHiDetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiDetail rename(String name) {
        return new ActHiDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiDetail rename(Name name) {
        return new ActHiDetail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, String, String, String, String, String, String, String, Integer, Timestamp, String, Double, Long, String, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
