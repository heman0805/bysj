/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables;


import com.heman.bysj.jooq.Bysj;
import com.heman.bysj.jooq.Indexes;
import com.heman.bysj.jooq.Keys;
import com.heman.bysj.jooq.tables.records.ActHiCommentRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActHiComment extends TableImpl<ActHiCommentRecord> {

    private static final long serialVersionUID = 454031978;

    /**
     * The reference instance of <code>bysj.act_hi_comment</code>
     */
    public static final ActHiComment ACT_HI_COMMENT = new ActHiComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActHiCommentRecord> getRecordType() {
        return ActHiCommentRecord.class;
    }

    /**
     * The column <code>bysj.act_hi_comment.ID_</code>.
     */
    public final TableField<ActHiCommentRecord, String> ID_ = createField(DSL.name("ID_"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>bysj.act_hi_comment.TYPE_</code>.
     */
    public final TableField<ActHiCommentRecord, String> TYPE_ = createField(DSL.name("TYPE_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bysj.act_hi_comment.TIME_</code>.
     */
    public final TableField<ActHiCommentRecord, Timestamp> TIME_ = createField(DSL.name("TIME_"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>bysj.act_hi_comment.USER_ID_</code>.
     */
    public final TableField<ActHiCommentRecord, String> USER_ID_ = createField(DSL.name("USER_ID_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bysj.act_hi_comment.TASK_ID_</code>.
     */
    public final TableField<ActHiCommentRecord, String> TASK_ID_ = createField(DSL.name("TASK_ID_"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bysj.act_hi_comment.PROC_INST_ID_</code>.
     */
    public final TableField<ActHiCommentRecord, String> PROC_INST_ID_ = createField(DSL.name("PROC_INST_ID_"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bysj.act_hi_comment.ACTION_</code>.
     */
    public final TableField<ActHiCommentRecord, String> ACTION_ = createField(DSL.name("ACTION_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bysj.act_hi_comment.MESSAGE_</code>.
     */
    public final TableField<ActHiCommentRecord, String> MESSAGE_ = createField(DSL.name("MESSAGE_"), org.jooq.impl.SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>bysj.act_hi_comment.FULL_MSG_</code>.
     */
    public final TableField<ActHiCommentRecord, byte[]> FULL_MSG_ = createField(DSL.name("FULL_MSG_"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>bysj.act_hi_comment</code> table reference
     */
    public ActHiComment() {
        this(DSL.name("act_hi_comment"), null);
    }

    /**
     * Create an aliased <code>bysj.act_hi_comment</code> table reference
     */
    public ActHiComment(String alias) {
        this(DSL.name(alias), ACT_HI_COMMENT);
    }

    /**
     * Create an aliased <code>bysj.act_hi_comment</code> table reference
     */
    public ActHiComment(Name alias) {
        this(alias, ACT_HI_COMMENT);
    }

    private ActHiComment(Name alias, Table<ActHiCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActHiComment(Name alias, Table<ActHiCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ActHiComment(Table<O> child, ForeignKey<O, ActHiCommentRecord> key) {
        super(child, key, ACT_HI_COMMENT);
    }

    @Override
    public Schema getSchema() {
        return Bysj.BYSJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACT_HI_COMMENT_PRIMARY);
    }

    @Override
    public UniqueKey<ActHiCommentRecord> getPrimaryKey() {
        return Keys.KEY_ACT_HI_COMMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<ActHiCommentRecord>> getKeys() {
        return Arrays.<UniqueKey<ActHiCommentRecord>>asList(Keys.KEY_ACT_HI_COMMENT_PRIMARY);
    }

    @Override
    public ActHiComment as(String alias) {
        return new ActHiComment(DSL.name(alias), this);
    }

    @Override
    public ActHiComment as(Name alias) {
        return new ActHiComment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiComment rename(String name) {
        return new ActHiComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiComment rename(Name name) {
        return new ActHiComment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, Timestamp, String, String, String, String, String, byte[]> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
