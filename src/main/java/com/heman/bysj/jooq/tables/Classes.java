/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables;


import com.heman.bysj.jooq.Bysj;
import com.heman.bysj.jooq.Indexes;
import com.heman.bysj.jooq.Keys;
import com.heman.bysj.jooq.tables.records.ClassesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Classes extends TableImpl<ClassesRecord> {

    private static final long serialVersionUID = 1599964569;

    /**
     * The reference instance of <code>bysj.classes</code>
     */
    public static final Classes CLASSES = new Classes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClassesRecord> getRecordType() {
        return ClassesRecord.class;
    }

    /**
     * The column <code>bysj.classes.id</code>.
     */
    public final TableField<ClassesRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>bysj.classes.college</code>.
     */
    public final TableField<ClassesRecord, String> COLLEGE = createField(DSL.name("college"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>bysj.classes.profession</code>.
     */
    public final TableField<ClassesRecord, String> PROFESSION = createField(DSL.name("profession"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>bysj.classes.class_</code>.
     */
    public final TableField<ClassesRecord, String> CLASS_ = createField(DSL.name("class_"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * Create a <code>bysj.classes</code> table reference
     */
    public Classes() {
        this(DSL.name("classes"), null);
    }

    /**
     * Create an aliased <code>bysj.classes</code> table reference
     */
    public Classes(String alias) {
        this(DSL.name(alias), CLASSES);
    }

    /**
     * Create an aliased <code>bysj.classes</code> table reference
     */
    public Classes(Name alias) {
        this(alias, CLASSES);
    }

    private Classes(Name alias, Table<ClassesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Classes(Name alias, Table<ClassesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Classes(Table<O> child, ForeignKey<O, ClassesRecord> key) {
        super(child, key, CLASSES);
    }

    @Override
    public Schema getSchema() {
        return Bysj.BYSJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLASSES_PRIMARY);
    }

    @Override
    public Identity<ClassesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CLASSES;
    }

    @Override
    public UniqueKey<ClassesRecord> getPrimaryKey() {
        return Keys.KEY_CLASSES_PRIMARY;
    }

    @Override
    public List<UniqueKey<ClassesRecord>> getKeys() {
        return Arrays.<UniqueKey<ClassesRecord>>asList(Keys.KEY_CLASSES_PRIMARY);
    }

    @Override
    public Classes as(String alias) {
        return new Classes(DSL.name(alias), this);
    }

    @Override
    public Classes as(Name alias) {
        return new Classes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Classes rename(String name) {
        return new Classes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Classes rename(Name name) {
        return new Classes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
