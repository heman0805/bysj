/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables.daos;


import com.heman.bysj.jooq.tables.Changemajors;
import com.heman.bysj.jooq.tables.records.ChangemajorsRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChangemajorsDao extends DAOImpl<ChangemajorsRecord, com.heman.bysj.jooq.tables.pojos.Changemajors, Integer> {

    /**
     * Create a new ChangemajorsDao without any configuration
     */
    public ChangemajorsDao() {
        super(Changemajors.CHANGEMAJORS, com.heman.bysj.jooq.tables.pojos.Changemajors.class);
    }

    /**
     * Create a new ChangemajorsDao with an attached configuration
     */
    public ChangemajorsDao(Configuration configuration) {
        super(Changemajors.CHANGEMAJORS, com.heman.bysj.jooq.tables.pojos.Changemajors.class, configuration);
    }

    @Override
    public Integer getId(com.heman.bysj.jooq.tables.pojos.Changemajors object) {
        return object.getCid();
    }

    /**
     * Fetch records that have <code>cid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchRangeOfCid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Changemajors.CHANGEMAJORS.CID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cid IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchByCid(Integer... values) {
        return fetch(Changemajors.CHANGEMAJORS.CID, values);
    }

    /**
     * Fetch a unique record that has <code>cid = value</code>
     */
    public com.heman.bysj.jooq.tables.pojos.Changemajors fetchOneByCid(Integer value) {
        return fetchOne(Changemajors.CHANGEMAJORS.CID, value);
    }

    /**
     * Fetch records that have <code>sid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchRangeOfSid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Changemajors.CHANGEMAJORS.SID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sid IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchBySid(Integer... values) {
        return fetch(Changemajors.CHANGEMAJORS.SID, values);
    }

    /**
     * Fetch a unique record that has <code>sid = value</code>
     */
    public com.heman.bysj.jooq.tables.pojos.Changemajors fetchOneBySid(Integer value) {
        return fetchOne(Changemajors.CHANGEMAJORS.SID, value);
    }

    /**
     * Fetch records that have <code>applyReason BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchRangeOfApplyreason(String lowerInclusive, String upperInclusive) {
        return fetchRange(Changemajors.CHANGEMAJORS.APPLYREASON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>applyReason IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchByApplyreason(String... values) {
        return fetch(Changemajors.CHANGEMAJORS.APPLYREASON, values);
    }

    /**
     * Fetch records that have <code>currentProfession BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchRangeOfCurrentprofession(String lowerInclusive, String upperInclusive) {
        return fetchRange(Changemajors.CHANGEMAJORS.CURRENTPROFESSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>currentProfession IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchByCurrentprofession(String... values) {
        return fetch(Changemajors.CHANGEMAJORS.CURRENTPROFESSION, values);
    }

    /**
     * Fetch records that have <code>newProfession BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchRangeOfNewprofession(String lowerInclusive, String upperInclusive) {
        return fetchRange(Changemajors.CHANGEMAJORS.NEWPROFESSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>newProfession IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchByNewprofession(String... values) {
        return fetch(Changemajors.CHANGEMAJORS.NEWPROFESSION, values);
    }

    /**
     * Fetch records that have <code>gpa BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchRangeOfGpa(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Changemajors.CHANGEMAJORS.GPA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gpa IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchByGpa(Double... values) {
        return fetch(Changemajors.CHANGEMAJORS.GPA, values);
    }

    /**
     * Fetch records that have <code>rank BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchRangeOfRank(String lowerInclusive, String upperInclusive) {
        return fetchRange(Changemajors.CHANGEMAJORS.RANK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rank IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchByRank(String... values) {
        return fetch(Changemajors.CHANGEMAJORS.RANK, values);
    }

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchRangeOfState(String lowerInclusive, String upperInclusive) {
        return fetchRange(Changemajors.CHANGEMAJORS.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchByState(String... values) {
        return fetch(Changemajors.CHANGEMAJORS.STATE, values);
    }

    /**
     * Fetch records that have <code>result BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchRangeOfResult(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Changemajors.CHANGEMAJORS.RESULT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>result IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchByResult(Integer... values) {
        return fetch(Changemajors.CHANGEMAJORS.RESULT, values);
    }

    /**
     * Fetch records that have <code>post BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchRangeOfPost(String lowerInclusive, String upperInclusive) {
        return fetchRange(Changemajors.CHANGEMAJORS.POST, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>post IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchByPost(String... values) {
        return fetch(Changemajors.CHANGEMAJORS.POST, values);
    }

    /**
     * Fetch records that have <code>refuseReason BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchRangeOfRefusereason(String lowerInclusive, String upperInclusive) {
        return fetchRange(Changemajors.CHANGEMAJORS.REFUSEREASON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>refuseReason IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Changemajors> fetchByRefusereason(String... values) {
        return fetch(Changemajors.CHANGEMAJORS.REFUSEREASON, values);
    }
}
