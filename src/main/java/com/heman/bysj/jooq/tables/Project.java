/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables;


import com.heman.bysj.jooq.Bysj;
import com.heman.bysj.jooq.Indexes;
import com.heman.bysj.jooq.Keys;
import com.heman.bysj.jooq.tables.records.ProjectRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Project extends TableImpl<ProjectRecord> {

    private static final long serialVersionUID = -2120857456;

    /**
     * The reference instance of <code>bysj.project</code>
     */
    public static final Project PROJECT = new Project();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectRecord> getRecordType() {
        return ProjectRecord.class;
    }

    /**
     * The column <code>bysj.project.formId</code>. 项目申请表主键ID
     */
    public final TableField<ProjectRecord, String> FORMID = createField(DSL.name("formId"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "项目申请表主键ID");

    /**
     * The column <code>bysj.project.processInstanceId</code>. 流程实例ID
     */
    public final TableField<ProjectRecord, String> PROCESSINSTANCEID = createField(DSL.name("processInstanceId"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "流程实例ID");

    /**
     * The column <code>bysj.project.userId</code>. 用户ID
     */
    public final TableField<ProjectRecord, Integer> USERID = createField(DSL.name("userId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "用户ID");

    /**
     * The column <code>bysj.project.role</code>. 用户角色
     */
    public final TableField<ProjectRecord, String> ROLE = createField(DSL.name("role"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "用户角色");

    /**
     * The column <code>bysj.project.projectName</code>. 项目名称
     */
    public final TableField<ProjectRecord, String> PROJECTNAME = createField(DSL.name("projectName"), org.jooq.impl.SQLDataType.VARCHAR(31).nullable(false), this, "项目名称");

    /**
     * The column <code>bysj.project.context</code>. 项目背景
     */
    public final TableField<ProjectRecord, String> CONTEXT = createField(DSL.name("context"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "项目背景");

    /**
     * The column <code>bysj.project.mean</code>. 研究意义
     */
    public final TableField<ProjectRecord, String> MEAN = createField(DSL.name("mean"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "研究意义");

    /**
     * The column <code>bysj.project.result</code>. 预期结果
     */
    public final TableField<ProjectRecord, String> RESULT = createField(DSL.name("result"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "预期结果");

    /**
     * The column <code>bysj.project.fund</code>. 研究经费
     */
    public final TableField<ProjectRecord, Double> FUND = createField(DSL.name("fund"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "研究经费");

    /**
     * The column <code>bysj.project.fundItem</code>. 经费详细信息
     */
    public final TableField<ProjectRecord, String> FUNDITEM = createField(DSL.name("fundItem"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "经费详细信息");

    /**
     * The column <code>bysj.project.processStatus</code>. 流程状态：0 申请，1 辅导员/系主任审核，2 副院长审核，3 科技处审核，4 财务处审核中，5  全部通过,6 拒绝
     */
    public final TableField<ProjectRecord, Integer> PROCESSSTATUS = createField(DSL.name("processStatus"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "流程状态：0 申请，1 辅导员/系主任审核，2 副院长审核，3 科技处审核，4 财务处审核中，5  全部通过,6 拒绝");

    /**
     * The column <code>bysj.project.createTime</code>. 项目申请创建时间
     */
    public final TableField<ProjectRecord, Timestamp> CREATETIME = createField(DSL.name("createTime"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "项目申请创建时间");

    /**
     * The column <code>bysj.project.updateTime</code>. 更新时间
     */
    public final TableField<ProjectRecord, Timestamp> UPDATETIME = createField(DSL.name("updateTime"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "更新时间");

    /**
     * Create a <code>bysj.project</code> table reference
     */
    public Project() {
        this(DSL.name("project"), null);
    }

    /**
     * Create an aliased <code>bysj.project</code> table reference
     */
    public Project(String alias) {
        this(DSL.name(alias), PROJECT);
    }

    /**
     * Create an aliased <code>bysj.project</code> table reference
     */
    public Project(Name alias) {
        this(alias, PROJECT);
    }

    private Project(Name alias, Table<ProjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private Project(Name alias, Table<ProjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Project(Table<O> child, ForeignKey<O, ProjectRecord> key) {
        super(child, key, PROJECT);
    }

    @Override
    public Schema getSchema() {
        return Bysj.BYSJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROJECT_PRIMARY);
    }

    @Override
    public UniqueKey<ProjectRecord> getPrimaryKey() {
        return Keys.KEY_PROJECT_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProjectRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectRecord>>asList(Keys.KEY_PROJECT_PRIMARY);
    }

    @Override
    public Project as(String alias) {
        return new Project(DSL.name(alias), this);
    }

    @Override
    public Project as(Name alias) {
        return new Project(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Project rename(String name) {
        return new Project(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Project rename(Name name) {
        return new Project(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, Integer, String, String, String, String, String, Double, String, Integer, Timestamp, Timestamp> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
