/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables;


import com.heman.bysj.jooq.Bysj;
import com.heman.bysj.jooq.Indexes;
import com.heman.bysj.jooq.Keys;
import com.heman.bysj.jooq.tables.records.HolidayCheckRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HolidayCheck extends TableImpl<HolidayCheckRecord> {

    private static final long serialVersionUID = -870627887;

    /**
     * The reference instance of <code>bysj.holiday_check</code>
     */
    public static final HolidayCheck HOLIDAY_CHECK = new HolidayCheck();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HolidayCheckRecord> getRecordType() {
        return HolidayCheckRecord.class;
    }

    /**
     * The column <code>bysj.holiday_check.checkId</code>. 审批ID
     */
    public final TableField<HolidayCheckRecord, String> CHECKID = createField(DSL.name("checkId"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "审批ID");

    /**
     * The column <code>bysj.holiday_check.processInstanceId</code>. activiti流程实例ID
     */
    public final TableField<HolidayCheckRecord, String> PROCESSINSTANCEID = createField(DSL.name("processInstanceId"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "activiti流程实例ID");

    /**
     * The column <code>bysj.holiday_check.taskId</code>. activiti任务ID
     */
    public final TableField<HolidayCheckRecord, String> TASKID = createField(DSL.name("taskId"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "activiti任务ID");

    /**
     * The column <code>bysj.holiday_check.userID</code>. 请假用户ID
     */
    public final TableField<HolidayCheckRecord, Integer> USERID = createField(DSL.name("userID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "请假用户ID");

    /**
     * The column <code>bysj.holiday_check.role</code>. 请假用户角色
     */
    public final TableField<HolidayCheckRecord, String> ROLE = createField(DSL.name("role"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "请假用户角色");

    /**
     * The column <code>bysj.holiday_check.checkResult</code>. 审批结果：0 不通过，1 通过
     */
    public final TableField<HolidayCheckRecord, Integer> CHECKRESULT = createField(DSL.name("checkResult"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "审批结果：0 不通过，1 通过");

    /**
     * The column <code>bysj.holiday_check.opinion</code>. 审批意见
     */
    public final TableField<HolidayCheckRecord, String> OPINION = createField(DSL.name("opinion"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "审批意见");

    /**
     * The column <code>bysj.holiday_check.checkTime</code>. 审批日期
     */
    public final TableField<HolidayCheckRecord, Timestamp> CHECKTIME = createField(DSL.name("checkTime"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "审批日期");

    /**
     * Create a <code>bysj.holiday_check</code> table reference
     */
    public HolidayCheck() {
        this(DSL.name("holiday_check"), null);
    }

    /**
     * Create an aliased <code>bysj.holiday_check</code> table reference
     */
    public HolidayCheck(String alias) {
        this(DSL.name(alias), HOLIDAY_CHECK);
    }

    /**
     * Create an aliased <code>bysj.holiday_check</code> table reference
     */
    public HolidayCheck(Name alias) {
        this(alias, HOLIDAY_CHECK);
    }

    private HolidayCheck(Name alias, Table<HolidayCheckRecord> aliased) {
        this(alias, aliased, null);
    }

    private HolidayCheck(Name alias, Table<HolidayCheckRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> HolidayCheck(Table<O> child, ForeignKey<O, HolidayCheckRecord> key) {
        super(child, key, HOLIDAY_CHECK);
    }

    @Override
    public Schema getSchema() {
        return Bysj.BYSJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HOLIDAY_CHECK_PRIMARY);
    }

    @Override
    public UniqueKey<HolidayCheckRecord> getPrimaryKey() {
        return Keys.KEY_HOLIDAY_CHECK_PRIMARY;
    }

    @Override
    public List<UniqueKey<HolidayCheckRecord>> getKeys() {
        return Arrays.<UniqueKey<HolidayCheckRecord>>asList(Keys.KEY_HOLIDAY_CHECK_PRIMARY);
    }

    @Override
    public HolidayCheck as(String alias) {
        return new HolidayCheck(DSL.name(alias), this);
    }

    @Override
    public HolidayCheck as(Name alias) {
        return new HolidayCheck(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HolidayCheck rename(String name) {
        return new HolidayCheck(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HolidayCheck rename(Name name) {
        return new HolidayCheck(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, Integer, String, Integer, String, Timestamp> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
