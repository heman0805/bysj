/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables.daos;


import com.heman.bysj.jooq.tables.Teacher;
import com.heman.bysj.jooq.tables.records.TeacherRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeacherDao extends DAOImpl<TeacherRecord, com.heman.bysj.jooq.tables.pojos.Teacher, Integer> {

    /**
     * Create a new TeacherDao without any configuration
     */
    public TeacherDao() {
        super(Teacher.TEACHER, com.heman.bysj.jooq.tables.pojos.Teacher.class);
    }

    /**
     * Create a new TeacherDao with an attached configuration
     */
    public TeacherDao(Configuration configuration) {
        super(Teacher.TEACHER, com.heman.bysj.jooq.tables.pojos.Teacher.class, configuration);
    }

    @Override
    public Integer getId(com.heman.bysj.jooq.tables.pojos.Teacher object) {
        return object.getTid();
    }

    /**
     * Fetch records that have <code>tid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchRangeOfTid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Teacher.TEACHER.TID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tid IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchByTid(Integer... values) {
        return fetch(Teacher.TEACHER.TID, values);
    }

    /**
     * Fetch a unique record that has <code>tid = value</code>
     */
    public com.heman.bysj.jooq.tables.pojos.Teacher fetchOneByTid(Integer value) {
        return fetchOne(Teacher.TEACHER.TID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Teacher.TEACHER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchByName(String... values) {
        return fetch(Teacher.TEACHER.NAME, values);
    }

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchRangeOfUsername(String lowerInclusive, String upperInclusive) {
        return fetchRange(Teacher.TEACHER.USERNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchByUsername(String... values) {
        return fetch(Teacher.TEACHER.USERNAME, values);
    }

    /**
     * Fetch a unique record that has <code>username = value</code>
     */
    public com.heman.bysj.jooq.tables.pojos.Teacher fetchOneByUsername(String value) {
        return fetchOne(Teacher.TEACHER.USERNAME, value);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(Teacher.TEACHER.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchByPassword(String... values) {
        return fetch(Teacher.TEACHER.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>grade BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchRangeOfGrade(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Teacher.TEACHER.GRADE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>grade IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchByGrade(Integer... values) {
        return fetch(Teacher.TEACHER.GRADE, values);
    }

    /**
     * Fetch records that have <code>college BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchRangeOfCollege(String lowerInclusive, String upperInclusive) {
        return fetchRange(Teacher.TEACHER.COLLEGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>college IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchByCollege(String... values) {
        return fetch(Teacher.TEACHER.COLLEGE, values);
    }

    /**
     * Fetch records that have <code>profession BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchRangeOfProfession(String lowerInclusive, String upperInclusive) {
        return fetchRange(Teacher.TEACHER.PROFESSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>profession IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchByProfession(String... values) {
        return fetch(Teacher.TEACHER.PROFESSION, values);
    }

    /**
     * Fetch records that have <code>position BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchRangeOfPosition(String lowerInclusive, String upperInclusive) {
        return fetchRange(Teacher.TEACHER.POSITION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>position IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchByPosition(String... values) {
        return fetch(Teacher.TEACHER.POSITION, values);
    }

    /**
     * Fetch records that have <code>superior BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchRangeOfSuperior(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Teacher.TEACHER.SUPERIOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>superior IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Teacher> fetchBySuperior(Integer... values) {
        return fetch(Teacher.TEACHER.SUPERIOR, values);
    }
}
