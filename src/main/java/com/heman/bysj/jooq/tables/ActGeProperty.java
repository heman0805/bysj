/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables;


import com.heman.bysj.jooq.Bysj;
import com.heman.bysj.jooq.Indexes;
import com.heman.bysj.jooq.Keys;
import com.heman.bysj.jooq.tables.records.ActGePropertyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActGeProperty extends TableImpl<ActGePropertyRecord> {

    private static final long serialVersionUID = 1130238676;

    /**
     * The reference instance of <code>bysj.act_ge_property</code>
     */
    public static final ActGeProperty ACT_GE_PROPERTY = new ActGeProperty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActGePropertyRecord> getRecordType() {
        return ActGePropertyRecord.class;
    }

    /**
     * The column <code>bysj.act_ge_property.NAME_</code>.
     */
    public final TableField<ActGePropertyRecord, String> NAME_ = createField(DSL.name("NAME_"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>bysj.act_ge_property.VALUE_</code>.
     */
    public final TableField<ActGePropertyRecord, String> VALUE_ = createField(DSL.name("VALUE_"), org.jooq.impl.SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>bysj.act_ge_property.REV_</code>.
     */
    public final TableField<ActGePropertyRecord, Integer> REV_ = createField(DSL.name("REV_"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>bysj.act_ge_property</code> table reference
     */
    public ActGeProperty() {
        this(DSL.name("act_ge_property"), null);
    }

    /**
     * Create an aliased <code>bysj.act_ge_property</code> table reference
     */
    public ActGeProperty(String alias) {
        this(DSL.name(alias), ACT_GE_PROPERTY);
    }

    /**
     * Create an aliased <code>bysj.act_ge_property</code> table reference
     */
    public ActGeProperty(Name alias) {
        this(alias, ACT_GE_PROPERTY);
    }

    private ActGeProperty(Name alias, Table<ActGePropertyRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActGeProperty(Name alias, Table<ActGePropertyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ActGeProperty(Table<O> child, ForeignKey<O, ActGePropertyRecord> key) {
        super(child, key, ACT_GE_PROPERTY);
    }

    @Override
    public Schema getSchema() {
        return Bysj.BYSJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACT_GE_PROPERTY_PRIMARY);
    }

    @Override
    public UniqueKey<ActGePropertyRecord> getPrimaryKey() {
        return Keys.KEY_ACT_GE_PROPERTY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ActGePropertyRecord>> getKeys() {
        return Arrays.<UniqueKey<ActGePropertyRecord>>asList(Keys.KEY_ACT_GE_PROPERTY_PRIMARY);
    }

    @Override
    public ActGeProperty as(String alias) {
        return new ActGeProperty(DSL.name(alias), this);
    }

    @Override
    public ActGeProperty as(Name alias) {
        return new ActGeProperty(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActGeProperty rename(String name) {
        return new ActGeProperty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActGeProperty rename(Name name) {
        return new ActGeProperty(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
