/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables.daos;


import com.heman.bysj.jooq.tables.Majorapproval;
import com.heman.bysj.jooq.tables.records.MajorapprovalRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MajorapprovalDao extends DAOImpl<MajorapprovalRecord, com.heman.bysj.jooq.tables.pojos.Majorapproval, Integer> {

    /**
     * Create a new MajorapprovalDao without any configuration
     */
    public MajorapprovalDao() {
        super(Majorapproval.MAJORAPPROVAL, com.heman.bysj.jooq.tables.pojos.Majorapproval.class);
    }

    /**
     * Create a new MajorapprovalDao with an attached configuration
     */
    public MajorapprovalDao(Configuration configuration) {
        super(Majorapproval.MAJORAPPROVAL, com.heman.bysj.jooq.tables.pojos.Majorapproval.class, configuration);
    }

    @Override
    public Integer getId(com.heman.bysj.jooq.tables.pojos.Majorapproval object) {
        return object.getAid();
    }

    /**
     * Fetch records that have <code>aid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfAid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.AID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>aid IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByAid(Integer... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.AID, values);
    }

    /**
     * Fetch a unique record that has <code>aid = value</code>
     */
    public com.heman.bysj.jooq.tables.pojos.Majorapproval fetchOneByAid(Integer value) {
        return fetchOne(Majorapproval.MAJORAPPROVAL.AID, value);
    }

    /**
     * Fetch records that have <code>cid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfCid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.CID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cid IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByCid(Integer... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.CID, values);
    }

    /**
     * Fetch records that have <code>currentAcademicOffice BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfCurrentacademicoffice(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.CURRENTACADEMICOFFICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>currentAcademicOffice IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByCurrentacademicoffice(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.CURRENTACADEMICOFFICE, values);
    }

    /**
     * Fetch records that have <code>CAResult BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfCaresult(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.CARESULT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CAResult IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByCaresult(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.CARESULT, values);
    }

    /**
     * Fetch records that have <code>CAReason BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfCareason(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.CAREASON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CAReason IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByCareason(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.CAREASON, values);
    }

    /**
     * Fetch records that have <code>currentDean BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfCurrentdean(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.CURRENTDEAN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>currentDean IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByCurrentdean(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.CURRENTDEAN, values);
    }

    /**
     * Fetch records that have <code>CDResult BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfCdresult(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.CDRESULT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CDResult IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByCdresult(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.CDRESULT, values);
    }

    /**
     * Fetch records that have <code>CDReason BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfCdreason(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.CDREASON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CDReason IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByCdreason(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.CDREASON, values);
    }

    /**
     * Fetch records that have <code>newAcademicOffice BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfNewacademicoffice(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.NEWACADEMICOFFICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>newAcademicOffice IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByNewacademicoffice(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.NEWACADEMICOFFICE, values);
    }

    /**
     * Fetch records that have <code>NAResult BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfNaresult(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.NARESULT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NAResult IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByNaresult(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.NARESULT, values);
    }

    /**
     * Fetch records that have <code>NAReason BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfNareason(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.NAREASON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NAReason IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByNareason(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.NAREASON, values);
    }

    /**
     * Fetch records that have <code>newDean BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfNewdean(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.NEWDEAN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>newDean IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByNewdean(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.NEWDEAN, values);
    }

    /**
     * Fetch records that have <code>NDResult BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfNdresult(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.NDRESULT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NDResult IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByNdresult(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.NDRESULT, values);
    }

    /**
     * Fetch records that have <code>NDReason BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfNdreason(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.NDREASON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NDReason IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByNdreason(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.NDREASON, values);
    }

    /**
     * Fetch records that have <code>AcademicOffice BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfAcademicoffice(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.ACADEMICOFFICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>AcademicOffice IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByAcademicoffice(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.ACADEMICOFFICE, values);
    }

    /**
     * Fetch records that have <code>AOResult BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfAoresult(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.AORESULT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>AOResult IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByAoresult(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.AORESULT, values);
    }

    /**
     * Fetch records that have <code>AOReason BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfAoreason(String lowerInclusive, String upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.AOREASON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>AOReason IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByAoreason(String... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.AOREASON, values);
    }

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchRangeOfState(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Majorapproval.MAJORAPPROVAL.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    public List<com.heman.bysj.jooq.tables.pojos.Majorapproval> fetchByState(Integer... values) {
        return fetch(Majorapproval.MAJORAPPROVAL.STATE, values);
    }
}
