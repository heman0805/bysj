/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables;


import com.heman.bysj.jooq.Bysj;
import com.heman.bysj.jooq.Indexes;
import com.heman.bysj.jooq.Keys;
import com.heman.bysj.jooq.tables.records.TeacherRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Teacher extends TableImpl<TeacherRecord> {

    private static final long serialVersionUID = 1846448052;

    /**
     * The reference instance of <code>bysj.teacher</code>
     */
    public static final Teacher TEACHER = new Teacher();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeacherRecord> getRecordType() {
        return TeacherRecord.class;
    }

    /**
     * The column <code>bysj.teacher.tid</code>. 主键ID
     */
    public final TableField<TeacherRecord, Integer> TID = createField(DSL.name("tid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>bysj.teacher.name</code>. 教师姓名
     */
    public final TableField<TeacherRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "教师姓名");

    /**
     * The column <code>bysj.teacher.username</code>. 用户名
     */
    public final TableField<TeacherRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "用户名");

    /**
     * The column <code>bysj.teacher.password</code>. 密码
     */
    public final TableField<TeacherRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "密码");

    /**
     * The column <code>bysj.teacher.grade</code>. 年级
     */
    public final TableField<TeacherRecord, Integer> GRADE = createField(DSL.name("grade"), org.jooq.impl.SQLDataType.INTEGER, this, "年级");

    /**
     * The column <code>bysj.teacher.college</code>. 学院名称
     */
    public final TableField<TeacherRecord, String> COLLEGE = createField(DSL.name("college"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "学院名称");

    /**
     * The column <code>bysj.teacher.profession</code>. 专业
     */
    public final TableField<TeacherRecord, String> PROFESSION = createField(DSL.name("profession"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "专业");

    /**
     * The column <code>bysj.teacher.position</code>. 职位
     */
    public final TableField<TeacherRecord, String> POSITION = createField(DSL.name("position"), org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false), this, "职位");

    /**
     * The column <code>bysj.teacher.superior</code>. 上级领导
     */
    public final TableField<TeacherRecord, Integer> SUPERIOR = createField(DSL.name("superior"), org.jooq.impl.SQLDataType.INTEGER, this, "上级领导");

    /**
     * Create a <code>bysj.teacher</code> table reference
     */
    public Teacher() {
        this(DSL.name("teacher"), null);
    }

    /**
     * Create an aliased <code>bysj.teacher</code> table reference
     */
    public Teacher(String alias) {
        this(DSL.name(alias), TEACHER);
    }

    /**
     * Create an aliased <code>bysj.teacher</code> table reference
     */
    public Teacher(Name alias) {
        this(alias, TEACHER);
    }

    private Teacher(Name alias, Table<TeacherRecord> aliased) {
        this(alias, aliased, null);
    }

    private Teacher(Name alias, Table<TeacherRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Teacher(Table<O> child, ForeignKey<O, TeacherRecord> key) {
        super(child, key, TEACHER);
    }

    @Override
    public Schema getSchema() {
        return Bysj.BYSJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEACHER_PRIMARY, Indexes.TEACHER_TEACHER_SUPERIOR_KEY, Indexes.TEACHER_TUSERNAME_UNIQUE);
    }

    @Override
    public Identity<TeacherRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TEACHER;
    }

    @Override
    public UniqueKey<TeacherRecord> getPrimaryKey() {
        return Keys.KEY_TEACHER_PRIMARY;
    }

    @Override
    public List<UniqueKey<TeacherRecord>> getKeys() {
        return Arrays.<UniqueKey<TeacherRecord>>asList(Keys.KEY_TEACHER_PRIMARY, Keys.KEY_TEACHER_TUSERNAME_UNIQUE);
    }

    @Override
    public List<ForeignKey<TeacherRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TeacherRecord, ?>>asList(Keys.TEACHER_SUPERIOR_KEY);
    }

    public com.heman.bysj.jooq.tables.Teacher teacher() {
        return new com.heman.bysj.jooq.tables.Teacher(this, Keys.TEACHER_SUPERIOR_KEY);
    }

    @Override
    public Teacher as(String alias) {
        return new Teacher(DSL.name(alias), this);
    }

    @Override
    public Teacher as(Name alias) {
        return new Teacher(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Teacher rename(String name) {
        return new Teacher(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Teacher rename(Name name) {
        return new Teacher(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, Integer, String, String, String, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
