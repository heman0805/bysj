/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables;


import com.heman.bysj.jooq.Bysj;
import com.heman.bysj.jooq.Indexes;
import com.heman.bysj.jooq.Keys;
import com.heman.bysj.jooq.tables.records.ActRuTaskRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActRuTask extends TableImpl<ActRuTaskRecord> {

    private static final long serialVersionUID = 592599488;

    /**
     * The reference instance of <code>bysj.act_ru_task</code>
     */
    public static final ActRuTask ACT_RU_TASK = new ActRuTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActRuTaskRecord> getRecordType() {
        return ActRuTaskRecord.class;
    }

    /**
     * The column <code>bysj.act_ru_task.ID_</code>.
     */
    public final TableField<ActRuTaskRecord, String> ID_ = createField(DSL.name("ID_"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>bysj.act_ru_task.REV_</code>.
     */
    public final TableField<ActRuTaskRecord, Integer> REV_ = createField(DSL.name("REV_"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bysj.act_ru_task.EXECUTION_ID_</code>.
     */
    public final TableField<ActRuTaskRecord, String> EXECUTION_ID_ = createField(DSL.name("EXECUTION_ID_"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bysj.act_ru_task.PROC_INST_ID_</code>.
     */
    public final TableField<ActRuTaskRecord, String> PROC_INST_ID_ = createField(DSL.name("PROC_INST_ID_"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bysj.act_ru_task.PROC_DEF_ID_</code>.
     */
    public final TableField<ActRuTaskRecord, String> PROC_DEF_ID_ = createField(DSL.name("PROC_DEF_ID_"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bysj.act_ru_task.NAME_</code>.
     */
    public final TableField<ActRuTaskRecord, String> NAME_ = createField(DSL.name("NAME_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bysj.act_ru_task.PARENT_TASK_ID_</code>.
     */
    public final TableField<ActRuTaskRecord, String> PARENT_TASK_ID_ = createField(DSL.name("PARENT_TASK_ID_"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bysj.act_ru_task.DESCRIPTION_</code>.
     */
    public final TableField<ActRuTaskRecord, String> DESCRIPTION_ = createField(DSL.name("DESCRIPTION_"), org.jooq.impl.SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>bysj.act_ru_task.TASK_DEF_KEY_</code>.
     */
    public final TableField<ActRuTaskRecord, String> TASK_DEF_KEY_ = createField(DSL.name("TASK_DEF_KEY_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bysj.act_ru_task.OWNER_</code>.
     */
    public final TableField<ActRuTaskRecord, String> OWNER_ = createField(DSL.name("OWNER_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bysj.act_ru_task.ASSIGNEE_</code>.
     */
    public final TableField<ActRuTaskRecord, String> ASSIGNEE_ = createField(DSL.name("ASSIGNEE_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bysj.act_ru_task.DELEGATION_</code>.
     */
    public final TableField<ActRuTaskRecord, String> DELEGATION_ = createField(DSL.name("DELEGATION_"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bysj.act_ru_task.PRIORITY_</code>.
     */
    public final TableField<ActRuTaskRecord, Integer> PRIORITY_ = createField(DSL.name("PRIORITY_"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bysj.act_ru_task.CREATE_TIME_</code>.
     */
    public final TableField<ActRuTaskRecord, Timestamp> CREATE_TIME_ = createField(DSL.name("CREATE_TIME_"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>bysj.act_ru_task.DUE_DATE_</code>.
     */
    public final TableField<ActRuTaskRecord, Timestamp> DUE_DATE_ = createField(DSL.name("DUE_DATE_"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>bysj.act_ru_task.CATEGORY_</code>.
     */
    public final TableField<ActRuTaskRecord, String> CATEGORY_ = createField(DSL.name("CATEGORY_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bysj.act_ru_task.SUSPENSION_STATE_</code>.
     */
    public final TableField<ActRuTaskRecord, Integer> SUSPENSION_STATE_ = createField(DSL.name("SUSPENSION_STATE_"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bysj.act_ru_task.TENANT_ID_</code>.
     */
    public final TableField<ActRuTaskRecord, String> TENANT_ID_ = createField(DSL.name("TENANT_ID_"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>bysj.act_ru_task.FORM_KEY_</code>.
     */
    public final TableField<ActRuTaskRecord, String> FORM_KEY_ = createField(DSL.name("FORM_KEY_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bysj.act_ru_task.CLAIM_TIME_</code>.
     */
    public final TableField<ActRuTaskRecord, Timestamp> CLAIM_TIME_ = createField(DSL.name("CLAIM_TIME_"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>bysj.act_ru_task</code> table reference
     */
    public ActRuTask() {
        this(DSL.name("act_ru_task"), null);
    }

    /**
     * Create an aliased <code>bysj.act_ru_task</code> table reference
     */
    public ActRuTask(String alias) {
        this(DSL.name(alias), ACT_RU_TASK);
    }

    /**
     * Create an aliased <code>bysj.act_ru_task</code> table reference
     */
    public ActRuTask(Name alias) {
        this(alias, ACT_RU_TASK);
    }

    private ActRuTask(Name alias, Table<ActRuTaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActRuTask(Name alias, Table<ActRuTaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ActRuTask(Table<O> child, ForeignKey<O, ActRuTaskRecord> key) {
        super(child, key, ACT_RU_TASK);
    }

    @Override
    public Schema getSchema() {
        return Bysj.BYSJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACT_RU_TASK_ACT_FK_TASK_EXE, Indexes.ACT_RU_TASK_ACT_FK_TASK_PROCDEF, Indexes.ACT_RU_TASK_ACT_FK_TASK_PROCINST, Indexes.ACT_RU_TASK_ACT_IDX_TASK_CREATE, Indexes.ACT_RU_TASK_PRIMARY);
    }

    @Override
    public UniqueKey<ActRuTaskRecord> getPrimaryKey() {
        return Keys.KEY_ACT_RU_TASK_PRIMARY;
    }

    @Override
    public List<UniqueKey<ActRuTaskRecord>> getKeys() {
        return Arrays.<UniqueKey<ActRuTaskRecord>>asList(Keys.KEY_ACT_RU_TASK_PRIMARY);
    }

    @Override
    public List<ForeignKey<ActRuTaskRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ActRuTaskRecord, ?>>asList(Keys.ACT_FK_TASK_EXE, Keys.ACT_FK_TASK_PROCINST, Keys.ACT_FK_TASK_PROCDEF);
    }

    public ActRuExecution actFkTaskExe() {
        return new ActRuExecution(this, Keys.ACT_FK_TASK_EXE);
    }

    public ActRuExecution actFkTaskProcinst() {
        return new ActRuExecution(this, Keys.ACT_FK_TASK_PROCINST);
    }

    public ActReProcdef actReProcdef() {
        return new ActReProcdef(this, Keys.ACT_FK_TASK_PROCDEF);
    }

    @Override
    public ActRuTask as(String alias) {
        return new ActRuTask(DSL.name(alias), this);
    }

    @Override
    public ActRuTask as(Name alias) {
        return new ActRuTask(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuTask rename(String name) {
        return new ActRuTask(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuTask rename(Name name) {
        return new ActRuTask(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<String, Integer, String, String, String, String, String, String, String, String, String, String, Integer, Timestamp, Timestamp, String, Integer, String, String, Timestamp> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
