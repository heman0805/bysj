/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables;


import com.heman.bysj.jooq.Bysj;
import com.heman.bysj.jooq.Indexes;
import com.heman.bysj.jooq.Keys;
import com.heman.bysj.jooq.tables.records.MajorapprovalRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Majorapproval extends TableImpl<MajorapprovalRecord> {

    private static final long serialVersionUID = -2021740542;

    /**
     * The reference instance of <code>bysj.majorapproval</code>
     */
    public static final Majorapproval MAJORAPPROVAL = new Majorapproval();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MajorapprovalRecord> getRecordType() {
        return MajorapprovalRecord.class;
    }

    /**
     * The column <code>bysj.majorapproval.aid</code>.
     */
    public final TableField<MajorapprovalRecord, Integer> AID = createField(DSL.name("aid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bysj.majorapproval.cid</code>.
     */
    public final TableField<MajorapprovalRecord, Integer> CID = createField(DSL.name("cid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bysj.majorapproval.currentAcademicOffice</code>. 现专业教务办名称
     */
    public final TableField<MajorapprovalRecord, String> CURRENTACADEMICOFFICE = createField(DSL.name("currentAcademicOffice"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "现专业教务办名称");

    /**
     * The column <code>bysj.majorapproval.CAResult</code>. 现专业教务办审批结果
     */
    public final TableField<MajorapprovalRecord, String> CARESULT = createField(DSL.name("CAResult"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "现专业教务办审批结果");

    /**
     * The column <code>bysj.majorapproval.CAReason</code>. 现专业教务办拒绝理由
     */
    public final TableField<MajorapprovalRecord, String> CAREASON = createField(DSL.name("CAReason"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "现专业教务办拒绝理由");

    /**
     * The column <code>bysj.majorapproval.currentDean</code>. 现专业院长
     */
    public final TableField<MajorapprovalRecord, String> CURRENTDEAN = createField(DSL.name("currentDean"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "现专业院长");

    /**
     * The column <code>bysj.majorapproval.CDResult</code>. 现专业院长审批意见
     */
    public final TableField<MajorapprovalRecord, String> CDRESULT = createField(DSL.name("CDResult"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "现专业院长审批意见");

    /**
     * The column <code>bysj.majorapproval.CDReason</code>. 现专业院长拒绝理由
     */
    public final TableField<MajorapprovalRecord, String> CDREASON = createField(DSL.name("CDReason"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "现专业院长拒绝理由");

    /**
     * The column <code>bysj.majorapproval.newAcademicOffice</code>. 新专业教务办名称
     */
    public final TableField<MajorapprovalRecord, String> NEWACADEMICOFFICE = createField(DSL.name("newAcademicOffice"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "新专业教务办名称");

    /**
     * The column <code>bysj.majorapproval.NAResult</code>. 新专业教务办审批结果
     */
    public final TableField<MajorapprovalRecord, String> NARESULT = createField(DSL.name("NAResult"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "新专业教务办审批结果");

    /**
     * The column <code>bysj.majorapproval.NAReason</code>. 新专业教务办拒绝理由
     */
    public final TableField<MajorapprovalRecord, String> NAREASON = createField(DSL.name("NAReason"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "新专业教务办拒绝理由");

    /**
     * The column <code>bysj.majorapproval.newDean</code>. 新专业院长意见
     */
    public final TableField<MajorapprovalRecord, String> NEWDEAN = createField(DSL.name("newDean"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "新专业院长意见");

    /**
     * The column <code>bysj.majorapproval.NDResult</code>. 新专业院长审批意见
     */
    public final TableField<MajorapprovalRecord, String> NDRESULT = createField(DSL.name("NDResult"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "新专业院长审批意见");

    /**
     * The column <code>bysj.majorapproval.NDReason</code>. 新专业院长拒绝理由
     */
    public final TableField<MajorapprovalRecord, String> NDREASON = createField(DSL.name("NDReason"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "新专业院长拒绝理由");

    /**
     * The column <code>bysj.majorapproval.AcademicOffice</code>. 学校教务处
     */
    public final TableField<MajorapprovalRecord, String> ACADEMICOFFICE = createField(DSL.name("AcademicOffice"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "学校教务处");

    /**
     * The column <code>bysj.majorapproval.AOResult</code>. 学校教务处审批结果
     */
    public final TableField<MajorapprovalRecord, String> AORESULT = createField(DSL.name("AOResult"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "学校教务处审批结果");

    /**
     * The column <code>bysj.majorapproval.AOReason</code>. 学校教务处拒绝理由
     */
    public final TableField<MajorapprovalRecord, String> AOREASON = createField(DSL.name("AOReason"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "学校教务处拒绝理由");

    /**
     * The column <code>bysj.majorapproval.state</code>. 审批状态（0：审批中，1：审批结束）
     */
    public final TableField<MajorapprovalRecord, Integer> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.INTEGER, this, "审批状态（0：审批中，1：审批结束）");

    /**
     * Create a <code>bysj.majorapproval</code> table reference
     */
    public Majorapproval() {
        this(DSL.name("majorapproval"), null);
    }

    /**
     * Create an aliased <code>bysj.majorapproval</code> table reference
     */
    public Majorapproval(String alias) {
        this(DSL.name(alias), MAJORAPPROVAL);
    }

    /**
     * Create an aliased <code>bysj.majorapproval</code> table reference
     */
    public Majorapproval(Name alias) {
        this(alias, MAJORAPPROVAL);
    }

    private Majorapproval(Name alias, Table<MajorapprovalRecord> aliased) {
        this(alias, aliased, null);
    }

    private Majorapproval(Name alias, Table<MajorapprovalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Majorapproval(Table<O> child, ForeignKey<O, MajorapprovalRecord> key) {
        super(child, key, MAJORAPPROVAL);
    }

    @Override
    public Schema getSchema() {
        return Bysj.BYSJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MAJORAPPROVAL_APPROVECID_FOREIGNKEY, Indexes.MAJORAPPROVAL_PRIMARY);
    }

    @Override
    public UniqueKey<MajorapprovalRecord> getPrimaryKey() {
        return Keys.KEY_MAJORAPPROVAL_PRIMARY;
    }

    @Override
    public List<UniqueKey<MajorapprovalRecord>> getKeys() {
        return Arrays.<UniqueKey<MajorapprovalRecord>>asList(Keys.KEY_MAJORAPPROVAL_PRIMARY);
    }

    @Override
    public List<ForeignKey<MajorapprovalRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MajorapprovalRecord, ?>>asList(Keys.APPROVECID_FOREIGNKEY);
    }

    public Changemajors changemajors() {
        return new Changemajors(this, Keys.APPROVECID_FOREIGNKEY);
    }

    @Override
    public Majorapproval as(String alias) {
        return new Majorapproval(DSL.name(alias), this);
    }

    @Override
    public Majorapproval as(Name alias) {
        return new Majorapproval(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Majorapproval rename(String name) {
        return new Majorapproval(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Majorapproval rename(Name name) {
        return new Majorapproval(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Integer, Integer, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, Integer> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
