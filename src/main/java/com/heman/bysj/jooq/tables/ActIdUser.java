/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables;


import com.heman.bysj.jooq.Bysj;
import com.heman.bysj.jooq.Indexes;
import com.heman.bysj.jooq.Keys;
import com.heman.bysj.jooq.tables.records.ActIdUserRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActIdUser extends TableImpl<ActIdUserRecord> {

    private static final long serialVersionUID = 968776480;

    /**
     * The reference instance of <code>bysj.act_id_user</code>
     */
    public static final ActIdUser ACT_ID_USER = new ActIdUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActIdUserRecord> getRecordType() {
        return ActIdUserRecord.class;
    }

    /**
     * The column <code>bysj.act_id_user.ID_</code>.
     */
    public final TableField<ActIdUserRecord, String> ID_ = createField(DSL.name("ID_"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>bysj.act_id_user.REV_</code>.
     */
    public final TableField<ActIdUserRecord, Integer> REV_ = createField(DSL.name("REV_"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bysj.act_id_user.FIRST_</code>.
     */
    public final TableField<ActIdUserRecord, String> FIRST_ = createField(DSL.name("FIRST_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bysj.act_id_user.LAST_</code>.
     */
    public final TableField<ActIdUserRecord, String> LAST_ = createField(DSL.name("LAST_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bysj.act_id_user.EMAIL_</code>.
     */
    public final TableField<ActIdUserRecord, String> EMAIL_ = createField(DSL.name("EMAIL_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bysj.act_id_user.PWD_</code>.
     */
    public final TableField<ActIdUserRecord, String> PWD_ = createField(DSL.name("PWD_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bysj.act_id_user.PICTURE_ID_</code>.
     */
    public final TableField<ActIdUserRecord, String> PICTURE_ID_ = createField(DSL.name("PICTURE_ID_"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * Create a <code>bysj.act_id_user</code> table reference
     */
    public ActIdUser() {
        this(DSL.name("act_id_user"), null);
    }

    /**
     * Create an aliased <code>bysj.act_id_user</code> table reference
     */
    public ActIdUser(String alias) {
        this(DSL.name(alias), ACT_ID_USER);
    }

    /**
     * Create an aliased <code>bysj.act_id_user</code> table reference
     */
    public ActIdUser(Name alias) {
        this(alias, ACT_ID_USER);
    }

    private ActIdUser(Name alias, Table<ActIdUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActIdUser(Name alias, Table<ActIdUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ActIdUser(Table<O> child, ForeignKey<O, ActIdUserRecord> key) {
        super(child, key, ACT_ID_USER);
    }

    @Override
    public Schema getSchema() {
        return Bysj.BYSJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACT_ID_USER_PRIMARY);
    }

    @Override
    public UniqueKey<ActIdUserRecord> getPrimaryKey() {
        return Keys.KEY_ACT_ID_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<ActIdUserRecord>> getKeys() {
        return Arrays.<UniqueKey<ActIdUserRecord>>asList(Keys.KEY_ACT_ID_USER_PRIMARY);
    }

    @Override
    public ActIdUser as(String alias) {
        return new ActIdUser(DSL.name(alias), this);
    }

    @Override
    public ActIdUser as(Name alias) {
        return new ActIdUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdUser rename(String name) {
        return new ActIdUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdUser rename(Name name) {
        return new ActIdUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Integer, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
