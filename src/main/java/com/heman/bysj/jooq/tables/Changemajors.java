/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables;


import com.heman.bysj.jooq.Bysj;
import com.heman.bysj.jooq.Indexes;
import com.heman.bysj.jooq.Keys;
import com.heman.bysj.jooq.tables.records.ChangemajorsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Changemajors extends TableImpl<ChangemajorsRecord> {

    private static final long serialVersionUID = -1594195961;

    /**
     * The reference instance of <code>bysj.changemajors</code>
     */
    public static final Changemajors CHANGEMAJORS = new Changemajors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChangemajorsRecord> getRecordType() {
        return ChangemajorsRecord.class;
    }

    /**
     * The column <code>bysj.changemajors.cid</code>. 转专业表主键ID
     */
    public final TableField<ChangemajorsRecord, String> CID = createField(DSL.name("cid"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "转专业表主键ID");

    /**
     * The column <code>bysj.changemajors.processInstanceId</code>. 转专业学生ID
     */
    public final TableField<ChangemajorsRecord, String> PROCESSINSTANCEID = createField(DSL.name("processInstanceId"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "转专业学生ID");

    /**
     * The column <code>bysj.changemajors.userId</code>. 用户ID
     */
    public final TableField<ChangemajorsRecord, Integer> USERID = createField(DSL.name("userId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "用户ID");

    /**
     * The column <code>bysj.changemajors.reason</code>. 转专业申请理由
     */
    public final TableField<ChangemajorsRecord, String> REASON = createField(DSL.name("reason"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "转专业申请理由");

    /**
     * The column <code>bysj.changemajors.currentCollege</code>. 限专业所在学院
     */
    public final TableField<ChangemajorsRecord, String> CURRENTCOLLEGE = createField(DSL.name("currentCollege"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "限专业所在学院");

    /**
     * The column <code>bysj.changemajors.currentProfession</code>. 现专业
     */
    public final TableField<ChangemajorsRecord, String> CURRENTPROFESSION = createField(DSL.name("currentProfession"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "现专业");

    /**
     * The column <code>bysj.changemajors.currentClass</code>. 现班级
     */
    public final TableField<ChangemajorsRecord, String> CURRENTCLASS = createField(DSL.name("currentClass"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "现班级");

    /**
     * The column <code>bysj.changemajors.newCollege</code>. 转向专业所在学院
     */
    public final TableField<ChangemajorsRecord, String> NEWCOLLEGE = createField(DSL.name("newCollege"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "转向专业所在学院");

    /**
     * The column <code>bysj.changemajors.newProfession</code>. 新专业
     */
    public final TableField<ChangemajorsRecord, String> NEWPROFESSION = createField(DSL.name("newProfession"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "新专业");

    /**
     * The column <code>bysj.changemajors.gpa</code>. 学生个人GPA
     */
    public final TableField<ChangemajorsRecord, Double> GPA = createField(DSL.name("gpa"), org.jooq.impl.SQLDataType.FLOAT.nullable(false), this, "学生个人GPA");

    /**
     * The column <code>bysj.changemajors.rank</code>. 成绩排名
     */
    public final TableField<ChangemajorsRecord, String> RANK = createField(DSL.name("rank"), org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false), this, "成绩排名");

    /**
     * The column <code>bysj.changemajors.contest</code>. 申请理由
     */
    public final TableField<ChangemajorsRecord, String> CONTEST = createField(DSL.name("contest"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "申请理由");

    /**
     * The column <code>bysj.changemajors.processStatus</code>. 流程状态：0 申请，1 审批中，2 已完成
     */
    public final TableField<ChangemajorsRecord, Integer> PROCESSSTATUS = createField(DSL.name("processStatus"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "流程状态：0 申请，1 审批中，2 已完成");

    /**
     * The column <code>bysj.changemajors.createTime</code>. 创建时间
     */
    public final TableField<ChangemajorsRecord, Timestamp> CREATETIME = createField(DSL.name("createTime"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>bysj.changemajors.updateTime</code>. 更新时间
     */
    public final TableField<ChangemajorsRecord, Timestamp> UPDATETIME = createField(DSL.name("updateTime"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "更新时间");

    /**
     * Create a <code>bysj.changemajors</code> table reference
     */
    public Changemajors() {
        this(DSL.name("changemajors"), null);
    }

    /**
     * Create an aliased <code>bysj.changemajors</code> table reference
     */
    public Changemajors(String alias) {
        this(DSL.name(alias), CHANGEMAJORS);
    }

    /**
     * Create an aliased <code>bysj.changemajors</code> table reference
     */
    public Changemajors(Name alias) {
        this(alias, CHANGEMAJORS);
    }

    private Changemajors(Name alias, Table<ChangemajorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Changemajors(Name alias, Table<ChangemajorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Changemajors(Table<O> child, ForeignKey<O, ChangemajorsRecord> key) {
        super(child, key, CHANGEMAJORS);
    }

    @Override
    public Schema getSchema() {
        return Bysj.BYSJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHANGEMAJORS_PRIMARY, Indexes.CHANGEMAJORS_SID);
    }

    @Override
    public UniqueKey<ChangemajorsRecord> getPrimaryKey() {
        return Keys.KEY_CHANGEMAJORS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ChangemajorsRecord>> getKeys() {
        return Arrays.<UniqueKey<ChangemajorsRecord>>asList(Keys.KEY_CHANGEMAJORS_PRIMARY, Keys.KEY_CHANGEMAJORS_SID);
    }

    @Override
    public Changemajors as(String alias) {
        return new Changemajors(DSL.name(alias), this);
    }

    @Override
    public Changemajors as(Name alias) {
        return new Changemajors(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Changemajors rename(String name) {
        return new Changemajors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Changemajors rename(Name name) {
        return new Changemajors(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, String, Integer, String, String, String, String, String, String, Double, String, String, Integer, Timestamp, Timestamp> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
