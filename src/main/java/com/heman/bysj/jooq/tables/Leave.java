/*
 * This file is generated by jOOQ.
 */
package com.heman.bysj.jooq.tables;


import com.heman.bysj.jooq.Bysj;
import com.heman.bysj.jooq.Indexes;
import com.heman.bysj.jooq.Keys;
import com.heman.bysj.jooq.tables.records.LeaveRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Leave extends TableImpl<LeaveRecord> {

    private static final long serialVersionUID = -1800080629;

    /**
     * The reference instance of <code>bysj.leave</code>
     */
    public static final Leave LEAVE = new Leave();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LeaveRecord> getRecordType() {
        return LeaveRecord.class;
    }

    /**
     * The column <code>bysj.leave.lid</code>. 请假表主键ID
     */
    public final TableField<LeaveRecord, Integer> LID = createField(DSL.name("lid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "请假表主键ID");

    /**
     * The column <code>bysj.leave.nid</code>. 请假人信息ID（参照学生表或教师表）
     */
    public final TableField<LeaveRecord, Integer> NID = createField(DSL.name("nid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "请假人信息ID（参照学生表或教师表）");

    /**
     * The column <code>bysj.leave.nTime</code>. 请假当前时间
     */
    public final TableField<LeaveRecord, Timestamp> NTIME = createField(DSL.name("nTime"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "请假当前时间");

    /**
     * The column <code>bysj.leave.sTime</code>. 请假起始时间
     */
    public final TableField<LeaveRecord, Timestamp> STIME = createField(DSL.name("sTime"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "请假起始时间");

    /**
     * The column <code>bysj.leave.eTime</code>. 请假结束时间
     */
    public final TableField<LeaveRecord, Timestamp> ETIME = createField(DSL.name("eTime"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "请假结束时间");

    /**
     * The column <code>bysj.leave.reason</code>. 请假理由
     */
    public final TableField<LeaveRecord, String> REASON = createField(DSL.name("reason"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "请假理由");

    /**
     * The column <code>bysj.leave.type</code>. 请假类型：（如：事假，病假等）
     */
    public final TableField<LeaveRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "请假类型：（如：事假，病假等）");

    /**
     * The column <code>bysj.leave.result</code>. 请假审批结果（0：审批中 1：通过 2：拒绝） 
     */
    public final TableField<LeaveRecord, Integer> RESULT = createField(DSL.name("result"), org.jooq.impl.SQLDataType.INTEGER, this, "请假审批结果（0：审批中 1：通过 2：拒绝） ");

    /**
     * The column <code>bysj.leave.remark</code>. 审批结果备注
     */
    public final TableField<LeaveRecord, String> REMARK = createField(DSL.name("remark"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "审批结果备注");

    /**
     * The column <code>bysj.leave.role</code>. 请假人职位（0：教师 1：学生）
     */
    public final TableField<LeaveRecord, Integer> ROLE = createField(DSL.name("role"), org.jooq.impl.SQLDataType.INTEGER, this, "请假人职位（0：教师 1：学生）");

    /**
     * The column <code>bysj.leave.tid</code>. 审批人ID
     */
    public final TableField<LeaveRecord, Integer> TID = createField(DSL.name("tid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "审批人ID");

    /**
     * Create a <code>bysj.leave</code> table reference
     */
    public Leave() {
        this(DSL.name("leave"), null);
    }

    /**
     * Create an aliased <code>bysj.leave</code> table reference
     */
    public Leave(String alias) {
        this(DSL.name(alias), LEAVE);
    }

    /**
     * Create an aliased <code>bysj.leave</code> table reference
     */
    public Leave(Name alias) {
        this(alias, LEAVE);
    }

    private Leave(Name alias, Table<LeaveRecord> aliased) {
        this(alias, aliased, null);
    }

    private Leave(Name alias, Table<LeaveRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Leave(Table<O> child, ForeignKey<O, LeaveRecord> key) {
        super(child, key, LEAVE);
    }

    @Override
    public Schema getSchema() {
        return Bysj.BYSJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LEAVE_NID_KEY, Indexes.LEAVE_PRIMARY, Indexes.LEAVE_TID_KEY);
    }

    @Override
    public Identity<LeaveRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LEAVE;
    }

    @Override
    public UniqueKey<LeaveRecord> getPrimaryKey() {
        return Keys.KEY_LEAVE_PRIMARY;
    }

    @Override
    public List<UniqueKey<LeaveRecord>> getKeys() {
        return Arrays.<UniqueKey<LeaveRecord>>asList(Keys.KEY_LEAVE_PRIMARY);
    }

    @Override
    public List<ForeignKey<LeaveRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LeaveRecord, ?>>asList(Keys.LEAVE_TID_FORIEGINKEY);
    }

    public Teacher teacher() {
        return new Teacher(this, Keys.LEAVE_TID_FORIEGINKEY);
    }

    @Override
    public Leave as(String alias) {
        return new Leave(DSL.name(alias), this);
    }

    @Override
    public Leave as(Name alias) {
        return new Leave(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Leave rename(String name) {
        return new Leave(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Leave rename(Name name) {
        return new Leave(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, Timestamp, Timestamp, Timestamp, String, String, Integer, String, Integer, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
